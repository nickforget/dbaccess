// Code generated by protoc-gen-go.
// source: basetype.proto
// DO NOT EDIT!

/*
Package basetype is a generated protocol buffer package.

It is generated from these files:
	basetype.proto

It has these top-level messages:
	Double
	Float
	Int32
	UInt32
	Int64
	UInt64
	String
	Bool
	Date
*/
package basetype

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Double struct {
	Data float64 `protobuf:"fixed64,1,opt,name=data" json:"data,omitempty"`
}

func (m *Double) Reset()                    { *m = Double{} }
func (m *Double) String() string            { return proto.CompactTextString(m) }
func (*Double) ProtoMessage()               {}
func (*Double) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Double) GetData() float64 {
	if m != nil {
		return m.Data
	}
	return 0
}

type Float struct {
	Data float32 `protobuf:"fixed32,1,opt,name=data" json:"data,omitempty"`
}

func (m *Float) Reset()                    { *m = Float{} }
func (m *Float) String() string            { return proto.CompactTextString(m) }
func (*Float) ProtoMessage()               {}
func (*Float) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Float) GetData() float32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type Int32 struct {
	Data int32 `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *Int32) Reset()                    { *m = Int32{} }
func (m *Int32) String() string            { return proto.CompactTextString(m) }
func (*Int32) ProtoMessage()               {}
func (*Int32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Int32) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type UInt32 struct {
	Data uint32 `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *UInt32) Reset()                    { *m = UInt32{} }
func (m *UInt32) String() string            { return proto.CompactTextString(m) }
func (*UInt32) ProtoMessage()               {}
func (*UInt32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UInt32) GetData() uint32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type Int64 struct {
	Data int64 `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (m *Int64) String() string            { return proto.CompactTextString(m) }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Int64) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

type UInt64 struct {
	Data uint64 `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *UInt64) Reset()                    { *m = UInt64{} }
func (m *UInt64) String() string            { return proto.CompactTextString(m) }
func (*UInt64) ProtoMessage()               {}
func (*UInt64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UInt64) GetData() uint64 {
	if m != nil {
		return m.Data
	}
	return 0
}

type String struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *String) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Bool struct {
	Data bool `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bool) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type Date struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Date) Reset()                    { *m = Date{} }
func (m *Date) String() string            { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()               {}
func (*Date) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Date) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Double)(nil), "basetype.Double")
	proto.RegisterType((*Float)(nil), "basetype.Float")
	proto.RegisterType((*Int32)(nil), "basetype.Int32")
	proto.RegisterType((*UInt32)(nil), "basetype.UInt32")
	proto.RegisterType((*Int64)(nil), "basetype.Int64")
	proto.RegisterType((*UInt64)(nil), "basetype.UInt64")
	proto.RegisterType((*String)(nil), "basetype.String")
	proto.RegisterType((*Bool)(nil), "basetype.Bool")
	proto.RegisterType((*Date)(nil), "basetype.Date")
}

func init() { proto.RegisterFile("basetype.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4a, 0x2c, 0x4e,
	0x2d, 0xa9, 0x2c, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x64,
	0xb8, 0xd8, 0x5c, 0xf2, 0x4b, 0x93, 0x72, 0x52, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x18, 0x83, 0xc0, 0x6c, 0x25, 0x69, 0x2e, 0x56, 0xb7, 0x9c, 0xfc,
	0xc4, 0x12, 0x14, 0x49, 0x26, 0x84, 0xa4, 0x67, 0x5e, 0x89, 0xb1, 0x11, 0x8a, 0x24, 0x2b, 0x54,
	0x12, 0x68, 0x6e, 0x28, 0xa6, 0x2c, 0x2f, 0x8a, 0x56, 0x33, 0x13, 0x14, 0x49, 0x66, 0x54, 0xad,
	0x68, 0xb2, 0x2c, 0x08, 0xd9, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x14, 0x59, 0x4e, 0xa8, 0xac,
	0x14, 0x17, 0x8b, 0x53, 0x7e, 0x7e, 0x0e, 0x8a, 0x1c, 0x07, 0x42, 0xce, 0x25, 0xb1, 0x24, 0x15,
	0x9b, 0xbe, 0x24, 0x36, 0x70, 0xb8, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x88, 0xf5,
	0x6d, 0x29, 0x01, 0x00, 0x00,
}
